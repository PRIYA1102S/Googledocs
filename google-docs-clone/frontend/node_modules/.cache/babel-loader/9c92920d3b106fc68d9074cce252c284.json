{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs-MERN\\\\google-docs-clone\\\\frontend\\\\src\\\\components\\\\PrivateRoute.jsx\",\n  _s = $RefreshSig$();\n// // src/components/PrivateRoute.jsx\n// import React, { useContext } from 'react';\n// import { Route, Redirect } from 'react-router-dom';\n// import { AuthContext } from '../contexts/AuthContext';\n\n// const PrivateRoute = ({ component: Component, ...rest }) => {\n//   const { isAuthenticated, loading } = useContext(AuthContext);\n\n//   if (loading) return <div>Loading...</div>;\n\n//   return (\n//     <Route\n//       {...rest}\n//       render={(props) =>\n//         isAuthenticated ? (\n//           <Component {...props} />\n//         ) : (\n//           <Redirect to=\"/\" /> // Redirect to Home/Login\n//         )\n//       }\n//     />\n//   );\n// };\n\n// export default PrivateRoute;\n\n// src/components/PrivateRoute.jsx\nimport React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    loading\n  } = useContext(AuthContext);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  return isAuthenticated ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 39\n  }, this);\n};\n_s(PrivateRoute, \"z4i+y1JWRMwnp/XsTPH72LjUDw0=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useContext","Navigate","AuthContext","jsxDEV","_jsxDEV","PrivateRoute","children","_s","isAuthenticated","loading","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["D:/Docs-MERN/google-docs-clone/frontend/src/components/PrivateRoute.jsx"],"sourcesContent":["// // src/components/PrivateRoute.jsx\r\n// import React, { useContext } from 'react';\r\n// import { Route, Redirect } from 'react-router-dom';\r\n// import { AuthContext } from '../contexts/AuthContext';\r\n\r\n// const PrivateRoute = ({ component: Component, ...rest }) => {\r\n//   const { isAuthenticated, loading } = useContext(AuthContext);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n\r\n//   return (\r\n//     <Route\r\n//       {...rest}\r\n//       render={(props) =>\r\n//         isAuthenticated ? (\r\n//           <Component {...props} />\r\n//         ) : (\r\n//           <Redirect to=\"/\" /> // Redirect to Home/Login\r\n//         )\r\n//       }\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// src/components/PrivateRoute.jsx\r\nimport React, { useContext } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nconst PrivateRoute = ({ children }) => {\r\n  const { isAuthenticated, loading } = useContext(AuthContext);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n\r\n  return isAuthenticated ? children : <Navigate to=\"/\" replace />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM;IAAEC,eAAe;IAAEC;EAAQ,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;EAE5D,IAAIO,OAAO,EAAE,oBAAOL,OAAA;IAAAE,QAAA,EAAK;EAAU;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEzC,OAAOL,eAAe,GAAGF,QAAQ,gBAAGF,OAAA,CAACH,QAAQ;IAACa,EAAE,EAAC,GAAG;IAACC,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjE,CAAC;AAACN,EAAA,CANIF,YAAY;AAAAW,EAAA,GAAZX,YAAY;AAQlB,eAAeA,YAAY;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}
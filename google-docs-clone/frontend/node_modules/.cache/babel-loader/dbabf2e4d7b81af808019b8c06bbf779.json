{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nconst SocketStatus = () => {\n  _s();\n  const [status, setStatus] = useState('Disconnected');\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = io('http://localhost:5000', {\n      withCredentials: true\n    });\n    newSocket.on('connect', () => {\n      setStatus('Connected');\n      console.log('Socket connected successfully!');\n    });\n    newSocket.on('disconnect', () => {\n      setStatus('Disconnected');\n      console.log('Socket disconnected');\n    });\n    newSocket.on('connect_error', error => {\n      setStatus('Connection Failed');\n      console.error('Socket connection error:', error);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  const testConnection = () => {\n    if (socket) {\n      socket.emit('test', {\n        message: 'Hello from client!'\n      });\n      console.log('Test message sent');\n    }\n  };\n};\n_s(SocketStatus, \"xIIsEIC20reenKrwUOP83rGjIGI=\");\n_c = SocketStatus;\nexport default SocketStatus;\nvar _c;\n$RefreshReg$(_c, \"SocketStatus\");","map":{"version":3,"names":["React","useState","useEffect","io","SocketStatus","_s","status","setStatus","socket","setSocket","newSocket","withCredentials","on","console","log","error","disconnect","testConnection","emit","message","_c","$RefreshReg$"],"sources":["D:/Docs-MERN/google-docs-clone/frontend/src/components/SocketStatus.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst SocketStatus = () => {\r\n  const [status, setStatus] = useState('Disconnected');\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const newSocket = io('http://localhost:5000', {\r\n      withCredentials: true,\r\n    });\r\n\r\n    newSocket.on('connect', () => {\r\n      setStatus('Connected');\r\n      console.log('Socket connected successfully!');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      setStatus('Disconnected');\r\n      console.log('Socket disconnected');\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      setStatus('Connection Failed');\r\n      console.error('Socket connection error:', error);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const testConnection = () => {\r\n    if (socket) {\r\n      socket.emit('test', { message: 'Hello from client!' });\r\n      console.log('Test message sent');\r\n    }\r\n  };\r\n};\r\n\r\nexport default SocketStatus;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AAErC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,cAAc,CAAC;EACpD,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAGP,EAAE,CAAC,uBAAuB,EAAE;MAC5CQ,eAAe,EAAE;IACnB,CAAC,CAAC;IAEFD,SAAS,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BL,SAAS,CAAC,WAAW,CAAC;MACtBM,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC,CAAC;IAEFJ,SAAS,CAACE,EAAE,CAAC,YAAY,EAAE,MAAM;MAC/BL,SAAS,CAAC,cAAc,CAAC;MACzBM,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;IAEFJ,SAAS,CAACE,EAAE,CAAC,eAAe,EAAGG,KAAK,IAAK;MACvCR,SAAS,CAAC,mBAAmB,CAAC;MAC9BM,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;IAEFN,SAAS,CAACC,SAAS,CAAC;IAEpB,OAAO,MAAM;MACXA,SAAS,CAACM,UAAU,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIT,MAAM,EAAE;MACVA,MAAM,CAACU,IAAI,CAAC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAqB,CAAC,CAAC;MACtDN,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CArCID,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}
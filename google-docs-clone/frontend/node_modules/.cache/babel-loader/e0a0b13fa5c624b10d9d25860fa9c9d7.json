{"ast":null,"code":"/**\r\n * Simple conflict resolution utilities for collaborative editing\r\n */\n\n/**\r\n * Merge two text contents with basic conflict resolution\r\n * This is a simplified approach - in production, you'd want more sophisticated OT (Operational Transform) or CRDT algorithms\r\n */\nexport const mergeTextContent = (localContent, remoteContent, baseContent = '') => {\n  // If contents are the same, no conflict\n  if (localContent === remoteContent) {\n    return localContent;\n  }\n\n  // If local hasn't changed from base, accept remote\n  if (localContent === baseContent) {\n    return remoteContent;\n  }\n\n  // If remote hasn't changed from base, keep local\n  if (remoteContent === baseContent) {\n    return localContent;\n  }\n\n  // Simple conflict resolution: try to merge by finding common parts\n  // This is a basic implementation - you might want to use diff-patch libraries\n  const localLines = localContent.split('\\n');\n  const remoteLines = remoteContent.split('\\n');\n  const baseLines = baseContent.split('\\n');\n\n  // For now, we'll prefer the remote content in case of conflicts\n  // and add a conflict marker\n  return remoteContent + '\\n\\n<!-- Conflict detected - please review -->';\n};\n\n/**\r\n * Check if two document states have conflicts\r\n */\nexport const hasConflict = (localContent, remoteContent, lastSyncedContent) => {\n  const localChanged = localContent !== lastSyncedContent;\n  const remoteChanged = remoteContent !== lastSyncedContent;\n  return localChanged && remoteChanged && localContent !== remoteContent;\n};\n\n/**\r\n * Generate a simple diff between two texts\r\n */\nexport const generateDiff = (oldText, newText) => {\n  // This is a very basic diff - in production you'd use a proper diff library\n  if (oldText === newText) {\n    return null;\n  }\n  return {\n    type: 'text-change',\n    oldText,\n    newText,\n    timestamp: Date.now()\n  };\n};\n\n/**\r\n * Apply operational transform for basic text operations\r\n */\nexport const transformOperation = (operation, againstOperation) => {\n  // Simplified OT - this would need to be much more sophisticated for production\n  // For now, we'll just return the operation as-is\n  return operation;\n};","map":{"version":3,"names":["mergeTextContent","localContent","remoteContent","baseContent","localLines","split","remoteLines","baseLines","hasConflict","lastSyncedContent","localChanged","remoteChanged","generateDiff","oldText","newText","type","timestamp","Date","now","transformOperation","operation","againstOperation"],"sources":["D:/Docs-MERN/google-docs-clone/frontend/src/utils/conflictResolution.js"],"sourcesContent":["/**\r\n * Simple conflict resolution utilities for collaborative editing\r\n */\r\n\r\n/**\r\n * Merge two text contents with basic conflict resolution\r\n * This is a simplified approach - in production, you'd want more sophisticated OT (Operational Transform) or CRDT algorithms\r\n */\r\nexport const mergeTextContent = (localContent, remoteContent, baseContent = '') => {\r\n  // If contents are the same, no conflict\r\n  if (localContent === remoteContent) {\r\n    return localContent;\r\n  }\r\n\r\n  // If local hasn't changed from base, accept remote\r\n  if (localContent === baseContent) {\r\n    return remoteContent;\r\n  }\r\n\r\n  // If remote hasn't changed from base, keep local\r\n  if (remoteContent === baseContent) {\r\n    return localContent;\r\n  }\r\n\r\n  // Simple conflict resolution: try to merge by finding common parts\r\n  // This is a basic implementation - you might want to use diff-patch libraries\r\n  const localLines = localContent.split('\\n');\r\n  const remoteLines = remoteContent.split('\\n');\r\n  const baseLines = baseContent.split('\\n');\r\n\r\n  // For now, we'll prefer the remote content in case of conflicts\r\n  // and add a conflict marker\r\n  return remoteContent + '\\n\\n<!-- Conflict detected - please review -->';\r\n};\r\n\r\n/**\r\n * Check if two document states have conflicts\r\n */\r\nexport const hasConflict = (localContent, remoteContent, lastSyncedContent) => {\r\n  const localChanged = localContent !== lastSyncedContent;\r\n  const remoteChanged = remoteContent !== lastSyncedContent;\r\n  \r\n  return localChanged && remoteChanged && localContent !== remoteContent;\r\n};\r\n\r\n/**\r\n * Generate a simple diff between two texts\r\n */\r\nexport const generateDiff = (oldText, newText) => {\r\n  // This is a very basic diff - in production you'd use a proper diff library\r\n  if (oldText === newText) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    type: 'text-change',\r\n    oldText,\r\n    newText,\r\n    timestamp: Date.now()\r\n  };\r\n};\r\n\r\n/**\r\n * Apply operational transform for basic text operations\r\n */\r\nexport const transformOperation = (operation, againstOperation) => {\r\n  // Simplified OT - this would need to be much more sophisticated for production\r\n  // For now, we'll just return the operation as-is\r\n  return operation;\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAGA,CAACC,YAAY,EAAEC,aAAa,EAAEC,WAAW,GAAG,EAAE,KAAK;EACjF;EACA,IAAIF,YAAY,KAAKC,aAAa,EAAE;IAClC,OAAOD,YAAY;EACrB;;EAEA;EACA,IAAIA,YAAY,KAAKE,WAAW,EAAE;IAChC,OAAOD,aAAa;EACtB;;EAEA;EACA,IAAIA,aAAa,KAAKC,WAAW,EAAE;IACjC,OAAOF,YAAY;EACrB;;EAEA;EACA;EACA,MAAMG,UAAU,GAAGH,YAAY,CAACI,KAAK,CAAC,IAAI,CAAC;EAC3C,MAAMC,WAAW,GAAGJ,aAAa,CAACG,KAAK,CAAC,IAAI,CAAC;EAC7C,MAAME,SAAS,GAAGJ,WAAW,CAACE,KAAK,CAAC,IAAI,CAAC;;EAEzC;EACA;EACA,OAAOH,aAAa,GAAG,gDAAgD;AACzE,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACP,YAAY,EAAEC,aAAa,EAAEO,iBAAiB,KAAK;EAC7E,MAAMC,YAAY,GAAGT,YAAY,KAAKQ,iBAAiB;EACvD,MAAME,aAAa,GAAGT,aAAa,KAAKO,iBAAiB;EAEzD,OAAOC,YAAY,IAAIC,aAAa,IAAIV,YAAY,KAAKC,aAAa;AACxE,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,YAAY,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EAChD;EACA,IAAID,OAAO,KAAKC,OAAO,EAAE;IACvB,OAAO,IAAI;EACb;EAEA,OAAO;IACLC,IAAI,EAAE,aAAa;IACnBF,OAAO;IACPC,OAAO;IACPE,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,SAAS,EAAEC,gBAAgB,KAAK;EACjE;EACA;EACA,OAAOD,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
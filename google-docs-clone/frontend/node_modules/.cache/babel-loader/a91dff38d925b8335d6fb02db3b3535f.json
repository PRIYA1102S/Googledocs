{"ast":null,"code":"import jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\n// Existing PDF function...\nexport const downloadDocumentAsPDF = async documentData => {\n  try {\n    // Create a temporary container for rendering\n    const container = document.createElement('div');\n    container.style.width = '210mm'; // A4 width\n    container.style.padding = '20mm';\n    container.style.backgroundColor = 'white';\n    container.style.fontFamily = 'Arial, sans-serif';\n\n    // Add title\n    const title = document.createElement('h1');\n    title.textContent = documentData.title;\n    title.style.marginBottom = '20px';\n    container.appendChild(title);\n\n    // Render content blocks\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          const textDiv = document.createElement('div');\n          textDiv.innerHTML = block.content;\n          textDiv.style.marginBottom = '10px';\n          container.appendChild(textDiv);\n        } else if (block.type === 'image') {\n          const img = document.createElement('img');\n          img.src = block.src;\n          img.alt = block.alt || '';\n          img.style.maxWidth = '100%';\n          img.style.marginBottom = '10px';\n          container.appendChild(img);\n        }\n      });\n    } else {\n      // Handle string content\n      const textDiv = document.createElement('div');\n      textDiv.innerHTML = documentData.content || 'No content';\n      container.appendChild(textDiv);\n    }\n\n    // Temporarily add to DOM\n    container.style.position = 'absolute';\n    container.style.left = '-9999px';\n    document.body.appendChild(container);\n\n    // Convert to canvas\n    const canvas = await html2canvas(container, {\n      scale: 2,\n      useCORS: true,\n      allowTaint: true\n    });\n\n    // Remove from DOM\n    document.body.removeChild(container);\n\n    // Create PDF\n    const pdf = new jsPDF('p', 'mm', 'a4');\n    const imgData = canvas.toDataURL('image/png');\n    const pdfWidth = pdf.internal.pageSize.getWidth();\n    const pdfHeight = canvas.height * pdfWidth / canvas.width;\n    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n    // Download\n    pdf.save(`${documentData.title || 'document'}.pdf`);\n    return true;\n  } catch (error) {\n    console.error('Error downloading PDF:', error);\n    throw new Error('Failed to download document');\n  }\n};\n\n// NEW: Word Document Download\nexport const downloadAsWord = async documentData => {\n  console.log('Downloading as Word:', documentData.title);\n  try {\n    // Create HTML content\n    let htmlContent = `\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>${documentData.title}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 40px; }\n            h1 { color: #333; margin-bottom: 20px; }\n            p { line-height: 1.6; margin-bottom: 10px; }\n          </style>\n        </head>\n        <body>\n          <h1>${documentData.title}</h1>\n    `;\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          htmlContent += `<div>${block.content}</div>`;\n        }\n      });\n    } else {\n      htmlContent += `<div>${documentData.content || 'No content'}</div>`;\n    }\n    htmlContent += '</body></html>';\n\n    // Create blob and download\n    const blob = new Blob([htmlContent], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${documentData.title || 'document'}.docx`;\n    a.click();\n    URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    console.error('Error downloading Word document:', error);\n    throw new Error('Failed to download Word document');\n  }\n};\n\n// NEW: HTML Download\nexport const downloadAsHTML = async documentData => {\n  console.log('Downloading as HTML:', documentData.title);\n  try {\n    let htmlContent = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${documentData.title}</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 40px 20px;\n            line-height: 1.6;\n            color: #333;\n        }\n        h1 {\n            color: #2c3e50;\n            border-bottom: 3px solid #3498db;\n            padding-bottom: 10px;\n            margin-bottom: 30px;\n        }\n        .content {\n            margin-bottom: 20px;\n        }\n        img {\n            max-width: 100%;\n            height: auto;\n            margin: 20px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>${documentData.title}</h1>\n    <div class=\"document-content\">\n`;\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          htmlContent += `<div class=\"content\">${block.content}</div>`;\n        } else if (block.type === 'image') {\n          htmlContent += `<img src=\"${block.src}\" alt=\"${block.alt || ''}\" />`;\n        }\n      });\n    } else {\n      htmlContent += `<div class=\"content\">${documentData.content || 'No content'}</div>`;\n    }\n    htmlContent += `\n    </div>\n    <footer style=\"margin-top: 50px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #666;\">\n        <p>Generated from Google Docs Clone on ${new Date().toLocaleDateString()}</p>\n    </footer>\n</body>\n</html>`;\n    const blob = new Blob([htmlContent], {\n      type: 'text/html'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${documentData.title || 'document'}.html`;\n    a.click();\n    URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    console.error('Error downloading HTML:', error);\n    throw new Error('Failed to download HTML');\n  }\n};\n\n// NEW: Plain Text Download\nexport const downloadAsText = async documentData => {\n  console.log('Downloading as Text:', documentData.title);\n  try {\n    let textContent = `${documentData.title}\\n`;\n    textContent += '='.repeat(documentData.title.length) + '\\n\\n';\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          // Strip HTML tags for plain text\n          const tempDiv = document.createElement('div');\n          tempDiv.innerHTML = block.content;\n          textContent += tempDiv.textContent || tempDiv.innerText || '';\n          textContent += '\\n\\n';\n        }\n      });\n    } else {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = documentData.content || 'No content';\n      textContent += tempDiv.textContent || tempDiv.innerText || '';\n    }\n    textContent += `\\n\\n---\\nGenerated on ${new Date().toLocaleDateString()}`;\n    const blob = new Blob([textContent], {\n      type: 'text/plain'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${documentData.title || 'document'}.txt`;\n    a.click();\n    URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    console.error('Error downloading text:', error);\n    throw new Error('Failed to download text file');\n  }\n};\n\n// NEW: Download with Progress Tracking\nexport const downloadWithProgress = async (documentData, format, quality, setProgress) => {\n  try {\n    setProgress(20);\n    switch (format) {\n      case 'pdf':\n        setProgress(40);\n        await downloadDocumentAsPDF(documentData);\n        break;\n      case 'docx':\n        setProgress(40);\n        await downloadAsWord(documentData);\n        break;\n      case 'html':\n        setProgress(40);\n        await downloadAsHTML(documentData);\n        break;\n      case 'txt':\n        setProgress(40);\n        await downloadAsText(documentData);\n        break;\n      default:\n        throw new Error('Unsupported format');\n    }\n    setProgress(80);\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setProgress(100);\n    return true;\n  } catch (error) {\n    console.error('Download failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["jsPDF","html2canvas","downloadDocumentAsPDF","documentData","container","document","createElement","style","width","padding","backgroundColor","fontFamily","title","textContent","marginBottom","appendChild","Array","isArray","content","forEach","block","type","textDiv","innerHTML","img","src","alt","maxWidth","position","left","body","canvas","scale","useCORS","allowTaint","removeChild","pdf","imgData","toDataURL","pdfWidth","internal","pageSize","getWidth","pdfHeight","height","addImage","save","error","console","Error","downloadAsWord","log","htmlContent","blob","Blob","url","URL","createObjectURL","a","href","download","click","revokeObjectURL","downloadAsHTML","Date","toLocaleDateString","downloadAsText","repeat","length","tempDiv","innerText","downloadWithProgress","format","quality","setProgress","Promise","resolve","setTimeout"],"sources":["D:/Docs-MERN/google-docs-clone/frontend/src/services/downloadService.js"],"sourcesContent":["import jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\n// Existing PDF function...\nexport const downloadDocumentAsPDF = async (documentData) => {\n  try {\n    // Create a temporary container for rendering\n    const container = document.createElement('div');\n    container.style.width = '210mm'; // A4 width\n    container.style.padding = '20mm';\n    container.style.backgroundColor = 'white';\n    container.style.fontFamily = 'Arial, sans-serif';\n    \n    // Add title\n    const title = document.createElement('h1');\n    title.textContent = documentData.title;\n    title.style.marginBottom = '20px';\n    container.appendChild(title);\n    \n    // Render content blocks\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          const textDiv = document.createElement('div');\n          textDiv.innerHTML = block.content;\n          textDiv.style.marginBottom = '10px';\n          container.appendChild(textDiv);\n        } else if (block.type === 'image') {\n          const img = document.createElement('img');\n          img.src = block.src;\n          img.alt = block.alt || '';\n          img.style.maxWidth = '100%';\n          img.style.marginBottom = '10px';\n          container.appendChild(img);\n        }\n      });\n    } else {\n      // Handle string content\n      const textDiv = document.createElement('div');\n      textDiv.innerHTML = documentData.content || 'No content';\n      container.appendChild(textDiv);\n    }\n    \n    // Temporarily add to DOM\n    container.style.position = 'absolute';\n    container.style.left = '-9999px';\n    document.body.appendChild(container);\n    \n    // Convert to canvas\n    const canvas = await html2canvas(container, {\n      scale: 2,\n      useCORS: true,\n      allowTaint: true\n    });\n    \n    // Remove from DOM\n    document.body.removeChild(container);\n    \n    // Create PDF\n    const pdf = new jsPDF('p', 'mm', 'a4');\n    const imgData = canvas.toDataURL('image/png');\n    \n    const pdfWidth = pdf.internal.pageSize.getWidth();\n    const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n    \n    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n    \n    // Download\n    pdf.save(`${documentData.title || 'document'}.pdf`);\n    \n    return true;\n  } catch (error) {\n    console.error('Error downloading PDF:', error);\n    throw new Error('Failed to download document');\n  }\n};\n\n// NEW: Word Document Download\nexport const downloadAsWord = async (documentData) => {\n  console.log('Downloading as Word:', documentData.title);\n  try {\n    // Create HTML content\n    let htmlContent = `\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>${documentData.title}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 40px; }\n            h1 { color: #333; margin-bottom: 20px; }\n            p { line-height: 1.6; margin-bottom: 10px; }\n          </style>\n        </head>\n        <body>\n          <h1>${documentData.title}</h1>\n    `;\n\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          htmlContent += `<div>${block.content}</div>`;\n        }\n      });\n    } else {\n      htmlContent += `<div>${documentData.content || 'No content'}</div>`;\n    }\n\n    htmlContent += '</body></html>';\n\n    // Create blob and download\n    const blob = new Blob([htmlContent], { \n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' \n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${documentData.title || 'document'}.docx`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    return true;\n  } catch (error) {\n    console.error('Error downloading Word document:', error);\n    throw new Error('Failed to download Word document');\n  }\n};\n\n// NEW: HTML Download\nexport const downloadAsHTML = async (documentData) => {\n  console.log('Downloading as HTML:', documentData.title);\n  try {\n    let htmlContent = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${documentData.title}</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 40px 20px;\n            line-height: 1.6;\n            color: #333;\n        }\n        h1 {\n            color: #2c3e50;\n            border-bottom: 3px solid #3498db;\n            padding-bottom: 10px;\n            margin-bottom: 30px;\n        }\n        .content {\n            margin-bottom: 20px;\n        }\n        img {\n            max-width: 100%;\n            height: auto;\n            margin: 20px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>${documentData.title}</h1>\n    <div class=\"document-content\">\n`;\n\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          htmlContent += `<div class=\"content\">${block.content}</div>`;\n        } else if (block.type === 'image') {\n          htmlContent += `<img src=\"${block.src}\" alt=\"${block.alt || ''}\" />`;\n        }\n      });\n    } else {\n      htmlContent += `<div class=\"content\">${documentData.content || 'No content'}</div>`;\n    }\n\n    htmlContent += `\n    </div>\n    <footer style=\"margin-top: 50px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #666;\">\n        <p>Generated from Google Docs Clone on ${new Date().toLocaleDateString()}</p>\n    </footer>\n</body>\n</html>`;\n\n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${documentData.title || 'document'}.html`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    return true;\n  } catch (error) {\n    console.error('Error downloading HTML:', error);\n    throw new Error('Failed to download HTML');\n  }\n};\n\n// NEW: Plain Text Download\nexport const downloadAsText = async (documentData) => {\n  console.log('Downloading as Text:', documentData.title);\n  try {\n    let textContent = `${documentData.title}\\n`;\n    textContent += '='.repeat(documentData.title.length) + '\\n\\n';\n\n    if (Array.isArray(documentData.content)) {\n      documentData.content.forEach(block => {\n        if (block.type === 'text') {\n          // Strip HTML tags for plain text\n          const tempDiv = document.createElement('div');\n          tempDiv.innerHTML = block.content;\n          textContent += tempDiv.textContent || tempDiv.innerText || '';\n          textContent += '\\n\\n';\n        }\n      });\n    } else {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = documentData.content || 'No content';\n      textContent += tempDiv.textContent || tempDiv.innerText || '';\n    }\n\n    textContent += `\\n\\n---\\nGenerated on ${new Date().toLocaleDateString()}`;\n\n    const blob = new Blob([textContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${documentData.title || 'document'}.txt`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    return true;\n  } catch (error) {\n    console.error('Error downloading text:', error);\n    throw new Error('Failed to download text file');\n  }\n};\n\n// NEW: Download with Progress Tracking\nexport const downloadWithProgress = async (documentData, format, quality, setProgress) => {\n  try {\n    setProgress(20);\n    \n    switch (format) {\n      case 'pdf':\n        setProgress(40);\n        await downloadDocumentAsPDF(documentData);\n        break;\n      case 'docx':\n        setProgress(40);\n        await downloadAsWord(documentData);\n        break;\n      case 'html':\n        setProgress(40);\n        await downloadAsHTML(documentData);\n        break;\n      case 'txt':\n        setProgress(40);\n        await downloadAsText(documentData);\n        break;\n      default:\n        throw new Error('Unsupported format');\n    }\n    \n    setProgress(80);\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setProgress(100);\n    \n    return true;\n  } catch (error) {\n    console.error('Download failed:', error);\n    throw error;\n  }\n};\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
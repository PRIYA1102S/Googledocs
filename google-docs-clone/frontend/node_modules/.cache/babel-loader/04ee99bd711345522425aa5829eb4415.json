{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs-MERN\\\\google-docs-clone\\\\frontend\\\\src\\\\components\\\\DocumentEditor.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { getDocument, updateDocument } from '../services/documentService';\n// import TextElement from './TextElement';\n// import ImageElement from './ImageElement';\n\n// const DocumentEditor = () => {\n//     const { id } = useParams();\n//     const [document, setDocument] = useState({ title: '', content: [] });\n//     const [isLoading, setIsLoading] = useState(true);\n\n//     useEffect(() => {\n//     const fetchDocument = async () => {\n//         try {\n//             const fetchedDocument = await getDocument(id);\n\n//             // Normalize content to array if it's not\n//             const normalizedContent = Array.isArray(fetchedDocument.content)\n//                 ? fetchedDocument.content\n//                 : [{ type: 'text', content: fetchedDocument.content || '' }];\n\n//             setDocument({\n//                 title: fetchedDocument.title || '',\n//                 content: normalizedContent\n//             });\n//         } catch (error) {\n//             console.error('Error fetching document:', error);\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     fetchDocument();\n// }, [id]);\n\n//     const handleSave = async () => {\n//         try {\n//             await updateDocument(id,document);\n//             alert('Document saved successfully!');\n//         } catch (error) {\n//             console.error('Error saving document:', error);\n//         }\n//     };\n\n//     const handleChange = (updatedContent) => {\n//         setDocument((prevDoc) => ({ ...prevDoc, content: updatedContent }));\n//     };\n\n//     if (isLoading) {\n//         return <div>Loading...</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h1>{document.title}</h1>\n//             <button onClick={handleSave}>Save Document</button>\n//             <div>\n//                 {document.content.map((element, index) => {\n//                     if (element.type === 'text') {\n//                         return (\n//                             <TextElement\n//                                 key={index}\n//                                 content={element.content}\n//                                 onChange={(newContent) => {\n//                                     const updatedContent = [...document.content];\n//                                     updatedContent[index].content = newContent;\n//                                     handleChange(updatedContent);\n//                                 }}\n//                             />\n//                         );\n//                     } else if (element.type === 'image') {\n//                         return (\n//                             <ImageElement\n//                                 key={index}\n//                                 src={element.src}\n//                                 alt={element.alt}\n//                                 onChange={(newSrc) => {\n//                                     const updatedContent = [...document.content];\n//                                     updatedContent[index].src = newSrc;\n//                                     handleChange(updatedContent);\n//                                 }}\n//                             />\n//                         );\n//                     }\n//                     return null;\n//                 })}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default DocumentEditor;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getDocument, updateDocument } from '../services/documentService';\nimport TextElement from './TextElement';\nimport ImageElement from './ImageElement';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocumentEditor = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get document ID from URL\n  const [document, setDocument] = useState({\n    title: '',\n    content: []\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch document from API on component mount\n  useEffect(() => {\n    const fetchDocument = async () => {\n      try {\n        const fetchedDocument = await getDocument(id);\n\n        // Ensure content is always an array\n        const normalizedContent = Array.isArray(fetchedDocument.content) ? fetchedDocument.content : [{\n          type: 'text',\n          content: fetchedDocument.content || ''\n        }];\n        setDocument({\n          title: fetchedDocument.title || '',\n          content: normalizedContent\n        });\n      } catch (error) {\n        console.error('Error fetching document:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchDocument();\n  }, [id]);\n\n  // Save document to API\n  const handleSave = async () => {\n    try {\n      await updateDocument(id, document);\n      alert('Document saved successfully!');\n    } catch (error) {\n      console.error('Error saving document:', error);\n      alert('Failed to save document.');\n    }\n  };\n\n  // Update content state\n  const handleChange = updatedContent => {\n    setDocument(prevDoc => ({\n      ...prevDoc,\n      content: updatedContent\n    }));\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: document.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        marginBottom: '20px'\n      },\n      children: \"Save Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: document.content.map((element, index) => {\n        if (element.type === 'text') {\n          return /*#__PURE__*/_jsxDEV(TextElement, {\n            content: element.content,\n            onChange: newContent => {\n              const updatedContent = [...document.content];\n              updatedContent[index].content = newContent;\n              handleChange(updatedContent);\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this);\n        }\n        if (element.type === 'image') {\n          return /*#__PURE__*/_jsxDEV(ImageElement, {\n            src: element.src,\n            alt: element.alt,\n            onChange: newSrc => {\n              const updatedContent = [...document.content];\n              updatedContent[index].src = newSrc;\n              handleChange(updatedContent);\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this);\n        }\n        return null; // Unknown type\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(DocumentEditor, \"AUE1Eh5c/yXZ4+omAtuG3t2vc9I=\", false, function () {\n  return [useParams];\n});\n_c = DocumentEditor;\nexport default DocumentEditor;\nvar _c;\n$RefreshReg$(_c, \"DocumentEditor\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getDocument","updateDocument","TextElement","ImageElement","jsxDEV","_jsxDEV","DocumentEditor","_s","id","document","setDocument","title","content","isLoading","setIsLoading","fetchDocument","fetchedDocument","normalizedContent","Array","isArray","type","error","console","handleSave","alert","handleChange","updatedContent","prevDoc","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","onClick","marginBottom","map","element","index","onChange","newContent","src","alt","newSrc","_c","$RefreshReg$"],"sources":["D:/Docs-MERN/google-docs-clone/frontend/src/components/DocumentEditor.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { getDocument, updateDocument } from '../services/documentService';\n// import TextElement from './TextElement';\n// import ImageElement from './ImageElement';\n\n// const DocumentEditor = () => {\n//     const { id } = useParams();\n//     const [document, setDocument] = useState({ title: '', content: [] });\n//     const [isLoading, setIsLoading] = useState(true);\n\n\n//     useEffect(() => {\n//     const fetchDocument = async () => {\n//         try {\n//             const fetchedDocument = await getDocument(id);\n            \n//             // Normalize content to array if it's not\n//             const normalizedContent = Array.isArray(fetchedDocument.content)\n//                 ? fetchedDocument.content\n//                 : [{ type: 'text', content: fetchedDocument.content || '' }];\n\n//             setDocument({\n//                 title: fetchedDocument.title || '',\n//                 content: normalizedContent\n//             });\n//         } catch (error) {\n//             console.error('Error fetching document:', error);\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     fetchDocument();\n// }, [id]);\n\n\n//     const handleSave = async () => {\n//         try {\n//             await updateDocument(id,document);\n//             alert('Document saved successfully!');\n//         } catch (error) {\n//             console.error('Error saving document:', error);\n//         }\n//     };\n\n//     const handleChange = (updatedContent) => {\n//         setDocument((prevDoc) => ({ ...prevDoc, content: updatedContent }));\n//     };\n\n//     if (isLoading) {\n//         return <div>Loading...</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h1>{document.title}</h1>\n//             <button onClick={handleSave}>Save Document</button>\n//             <div>\n//                 {document.content.map((element, index) => {\n//                     if (element.type === 'text') {\n//                         return (\n//                             <TextElement\n//                                 key={index}\n//                                 content={element.content}\n//                                 onChange={(newContent) => {\n//                                     const updatedContent = [...document.content];\n//                                     updatedContent[index].content = newContent;\n//                                     handleChange(updatedContent);\n//                                 }}\n//                             />\n//                         );\n//                     } else if (element.type === 'image') {\n//                         return (\n//                             <ImageElement\n//                                 key={index}\n//                                 src={element.src}\n//                                 alt={element.alt}\n//                                 onChange={(newSrc) => {\n//                                     const updatedContent = [...document.content];\n//                                     updatedContent[index].src = newSrc;\n//                                     handleChange(updatedContent);\n//                                 }}\n//                             />\n//                         );\n//                     }\n//                     return null;\n//                 })}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default DocumentEditor;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getDocument, updateDocument } from '../services/documentService';\nimport TextElement from './TextElement';\nimport ImageElement from './ImageElement';\n\nconst DocumentEditor = () => {\n  const { id } = useParams(); // Get document ID from URL\n  const [document, setDocument] = useState({ title: '', content: [] });\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch document from API on component mount\n  useEffect(() => {\n    const fetchDocument = async () => {\n      try {\n        const fetchedDocument = await getDocument(id);\n\n        // Ensure content is always an array\n        const normalizedContent = Array.isArray(fetchedDocument.content)\n          ? fetchedDocument.content\n          : [{ type: 'text', content: fetchedDocument.content || '' }];\n\n        setDocument({\n          title: fetchedDocument.title || '',\n          content: normalizedContent,\n        });\n      } catch (error) {\n        console.error('Error fetching document:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDocument();\n  }, [id]);\n\n  // Save document to API\n  const handleSave = async () => {\n    try {\n      await updateDocument(id, document);\n      alert('Document saved successfully!');\n    } catch (error) {\n      console.error('Error saving document:', error);\n      alert('Failed to save document.');\n    }\n  };\n\n  // Update content state\n  const handleChange = (updatedContent) => {\n    setDocument((prevDoc) => ({\n      ...prevDoc,\n      content: updatedContent,\n    }));\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>{document.title}</h1>\n      <button onClick={handleSave} style={{ marginBottom: '20px' }}>\n        Save Document\n      </button>\n\n      <div>\n        {document.content.map((element, index) => {\n          if (element.type === 'text') {\n            return (\n              <TextElement\n                key={index}\n                content={element.content}\n                onChange={(newContent) => {\n                  const updatedContent = [...document.content];\n                  updatedContent[index].content = newContent;\n                  handleChange(updatedContent);\n                }}\n              />\n            );\n          }\n\n          if (element.type === 'image') {\n            return (\n              <ImageElement\n                key={index}\n                src={element.src}\n                alt={element.alt}\n                onChange={(newSrc) => {\n                  const updatedContent = [...document.content];\n                  updatedContent[index].src = newSrc;\n                  handleChange(updatedContent);\n                }}\n              />\n            );\n          }\n\n          return null; // Unknown type\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentEditor;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,EAAEC,cAAc,QAAQ,6BAA6B;AACzE,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IAAEc,KAAK,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EACpE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,eAAe,GAAG,MAAMhB,WAAW,CAACQ,EAAE,CAAC;;QAE7C;QACA,MAAMS,iBAAiB,GAAGC,KAAK,CAACC,OAAO,CAACH,eAAe,CAACJ,OAAO,CAAC,GAC5DI,eAAe,CAACJ,OAAO,GACvB,CAAC;UAAEQ,IAAI,EAAE,MAAM;UAAER,OAAO,EAAEI,eAAe,CAACJ,OAAO,IAAI;QAAG,CAAC,CAAC;QAE9DF,WAAW,CAAC;UACVC,KAAK,EAAEK,eAAe,CAACL,KAAK,IAAI,EAAE;UAClCC,OAAO,EAAEK;QACX,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,SAAS;QACRP,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;;EAER;EACA,MAAMe,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMtB,cAAc,CAACO,EAAE,EAAEC,QAAQ,CAAC;MAClCe,KAAK,CAAC,8BAA8B,CAAC;IACvC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CG,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIC,cAAc,IAAK;IACvChB,WAAW,CAAEiB,OAAO,KAAM;MACxB,GAAGA,OAAO;MACVf,OAAO,EAAEc;IACX,CAAC,CAAC,CAAC;EACL,CAAC;EAED,IAAIb,SAAS,EAAE,oBAAOR,OAAA;IAAAuB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE3C,oBACE3B,OAAA;IAAK4B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAN,QAAA,gBAC9BvB,OAAA;MAAAuB,QAAA,EAAKnB,QAAQ,CAACE;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzB3B,OAAA;MAAQ8B,OAAO,EAAEZ,UAAW;MAACU,KAAK,EAAE;QAAEG,YAAY,EAAE;MAAO,CAAE;MAAAR,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAET3B,OAAA;MAAAuB,QAAA,EACGnB,QAAQ,CAACG,OAAO,CAACyB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;QACxC,IAAID,OAAO,CAAClB,IAAI,KAAK,MAAM,EAAE;UAC3B,oBACEf,OAAA,CAACH,WAAW;YAEVU,OAAO,EAAE0B,OAAO,CAAC1B,OAAQ;YACzB4B,QAAQ,EAAGC,UAAU,IAAK;cACxB,MAAMf,cAAc,GAAG,CAAC,GAAGjB,QAAQ,CAACG,OAAO,CAAC;cAC5Cc,cAAc,CAACa,KAAK,CAAC,CAAC3B,OAAO,GAAG6B,UAAU;cAC1ChB,YAAY,CAACC,cAAc,CAAC;YAC9B;UAAE,GANGa,KAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOX,CAAC;QAEN;QAEA,IAAIM,OAAO,CAAClB,IAAI,KAAK,OAAO,EAAE;UAC5B,oBACEf,OAAA,CAACF,YAAY;YAEXuC,GAAG,EAAEJ,OAAO,CAACI,GAAI;YACjBC,GAAG,EAAEL,OAAO,CAACK,GAAI;YACjBH,QAAQ,EAAGI,MAAM,IAAK;cACpB,MAAMlB,cAAc,GAAG,CAAC,GAAGjB,QAAQ,CAACG,OAAO,CAAC;cAC5Cc,cAAc,CAACa,KAAK,CAAC,CAACG,GAAG,GAAGE,MAAM;cAClCnB,YAAY,CAACC,cAAc,CAAC;YAC9B;UAAE,GAPGa,KAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQX,CAAC;QAEN;QAEA,OAAO,IAAI,CAAC,CAAC;MACf,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzB,EAAA,CA9FID,cAAc;EAAA,QACHP,SAAS;AAAA;AAAA8C,EAAA,GADpBvC,cAAc;AAgGpB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}